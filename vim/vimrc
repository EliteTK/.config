set rtp=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

let mapleader = ","
let g:mapleader = ","

" Improve!
set nocompatible

" Automatically source the vim config when saved. Because convenience or
" something.
au! bufwritepost .vimrc source %

" "
" Vundle.
" "
filetype off

set rtp+=$XDG_CONFIG_HOME/vim/bundle/vundle/
call vundle#begin('$XDG_CONFIG_HOME/vim/bundle')

Plugin 'gmarik/vundle'

" "
" Vundle bundles.
" "

Plugin 'Shougo/neocomplete.vim'
Plugin 'bling/vim-airline'
Plugin 'edkolev/promptline.vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'glsl.vim'
Plugin 'jnurmine/Zenburn'
Plugin 'majutsushi/tagbar'
Plugin 'nanotech/jellybeans.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-fugitive'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'kien/ctrlp.vim'
Plugin 'vivien/vim-addon-linux-coding-style'

call vundle#end()

filetype plugin indent on

" "
" Plugin Settings
" "

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

inoremap <expr><c-g> neocomplete#undo_completion()
inoremap <expr><c-l> neocomplete#complete_common_string()

inoremap <silent> <cr> <c-r>=<sid>cr_function()<cr>
function! s:cr_function()
    return neocomplete#close_popup() ."\<cr>"
endfunction

inoremap <expr><tab>  pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><C-h>  neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>   neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_overwrite_completefunc     = 1
"let g:neocomplete#force_omni_input_patterns.c      = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp    = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc   = '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
let g:neocomplete#force_omni_input_patterns.objcpp = '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)\|\h\w*::\w*'

" Vim multiple cursors
function! Multiple_cursors_before()
    exe 'NeoCompleteLock'
endfunction

function! Multiple_cursors_after()
    exe 'NeoCompleteUnlock'
endfunction

" "
" Autocommands
" "

" Filetypes
au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl setf glsl  " GLSL
au BufNewFile,BufRead *.clw setf clarion                        " Clarion
au BufNewFile,BufRead *.rfc setf rfc                            " RFC

" Neocomplete
au FileType css           setlocal omnifunc=csscomplete#CompleteCSS
au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
au FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
au FileType python        setlocal omnifunc=pythoncomplete#Complete
au FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags

" Backup and other
au BufWritePre * let &backupext = '.' . strftime("%Y%m%d_%H%M%S")

" Restore file position
au BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" When gaining / loosing focus, switch relative numberline on and off
au FocusLost * :set norelativenumber
au FocusGained * :set relativenumber
au InsertEnter * :set norelativenumber
au InsertLeave * :set relativenumber

" "
" Settings
" "

" General
set autoindent                             " Indent automatically (electric)
set smartindent                            " Indent using even more sophisticated rules
set smarttab                               " Smart tab behaviour
set backspace=indent,eol,start             " Allow backspace over indent, eol, start
set hidden                                 " Allow background buffers.
set ignorecase                             " Case insensitive search
set smartcase                              " But don't ignore if search mixed
set incsearch                              " Incremental search
set spelllang=en_gb                        " Spell check language
set viminfo+=n$XDG_CONFIG_HOME/vim/viminfo " Location of viminfo

" Visual
set foldlevelstart=99                      " Unfold all folds to start
set laststatus=2                           " Show statusline
set listchars=tab:Â»\ ,trail:Â·              " Show tabs and trailing whitespace
set list                                   " Actually enable the above
set number                                 " Numberline
set relativenumber                         " Relative numbers
set showcmd                                " Show command (bottom right)
set guifont=Bitstream\ Vera\ Sans\ Mono\ for\ Powerline\ 9 " Font in GVim

" Backup
silent !mkdir $HOME/.cache $HOME/.cache/vim $HOME/.cache/vim/{backup,swap,undo} >/dev/null 2>&1

set backup                                 " Use backup files
set backupdir=$HOME/.cache/vim/backup      " Location of backups
set swapfile                               " Use swap files
set directory=$HOME/.cache/vim/swap        " Location of swap files
set undofile                               " Use undofiles
set undodir=$HOME/.cache/vim/undo          " Location of undofiles

" Mouse control
if has('mouse')
    set mouse=a
endif

" Syntax Highlighting
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch

    if &t_Co == 256 || has("gui_running")
        color jellybeans
    else
        color delek
    endif
endif

" Highlight long lines
highlight ColorColumn ctermbg=black
call matchadd('ColorColumn', '\%81v', 100)

" "
" Mappings
" "

""
" Normal Mode
""

" Spell check
nnoremap <leader>s :setlocal spell!<cr>

" Buffer navigation
nnoremap <F7> :bprev<cr>
nnoremap <F8> :bnext<cr>

" Make and show Errors
nnoremap <F5> :make<cr>
nnoremap <F6> :cw<cr>

" Set filetype
nnoremap <leader>ff :set ft=

" Clear highlighting
nnoremap <silent> <f3> :nohlsearch<cr>

"" GUI
" Navigating windows.
nnoremap <silent> <A-h> <C-w>h
nnoremap <silent> <A-j> <C-w>j
nnoremap <silent> <A-k> <C-w>k
nnoremap <silent> <A-l> <C-w>l

" Moving windows.
nnoremap <silent> <A-H> <C-w>H
nnoremap <silent> <A-J> <C-w>J
nnoremap <silent> <A-K> <C-w>K
nnoremap <silent> <A-L> <C-w>L

" Resizing windows.
nnoremap <silent> <A-u> <C-w><
nnoremap <silent> <A-i> <C-w>+
nnoremap <silent> <A-o> <C-w>-
nnoremap <silent> <A-p> <C-w>>

"" CLI
" Navigating windows.
nnoremap <silent> h <C-w>h
nnoremap <silent> j <C-w>j
nnoremap <silent> k <C-w>k
nnoremap <silent> l <C-w>l

" Moving windows.
nnoremap <silent> H <C-w>H
nnoremap <silent> J <C-w>J
nnoremap <silent> K <C-w>K
nnoremap <silent> L <C-w>L

" Resizing windows.
nnoremap <silent> u <C-w><
nnoremap <silent> i <C-w>+
nnoremap <silent> o <C-w>-
nnoremap <silent> p <C-w>>

" Space to toggle fold
nnoremap <silent> <space> za

" Tab to toggle virtualedit
function! ToggleVirtual()
    if &virtualedit == "all"
        set virtualedit=
    else
        set virtualedit=all
    endif
endfunction

nnoremap <silent> <tab> :call ToggleVirtual()<cr>

" Remove trailing whitespace
function! RemoveTrailing()
    let line_num = line('.')
    exe '%s/\s*$//'
    exe 'normal! ' . line_num . 'G'
endfunction

nnoremap <silent> <leader>rw :call RemoveTrailing()<cr>

""
" Insert Mode
""

" C-hjkl instead of arrows
inoremap <silent> <C-h> <left>
inoremap <silent> <C-j> <down>
inoremap <silent> <C-k> <up>
inoremap <silent> <C-l> <right>

""
" Visual Mode
""

" Sort range
vnoremap <Leader>s :sort<CR>

""
" Other
""

" Unbind the cursor keys in insert, normal and visual modes
for prefix in ['i', 'n', 'v']
    for key in ['<Up>', '<Down>', '<Left>', '<Right>']
        exe prefix . "noremap " . key . " <Nop>"
    endfor
endfor

" vim: set ts=4 sw=4 et:
